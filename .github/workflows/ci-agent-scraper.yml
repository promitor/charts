name: Helm Chart CI - Scraper Agent

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
  pull_request:
    paths:
    - '.github/workflows/ci-agent-scraper.yml'
    - 'promitor-agent-scraper/**'

jobs:
  lint-helm-3-x:
    name: Lint Helm Chart
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Helm install
      uses: Azure/setup-helm@v3

    - name: Lint Promitor Scraper Helm chart
      run: helm lint promitor-agent-scraper

  deploy-helm-3-x:
    name: Deploy to Kubernetes ${{ matrix.kubernetesVersion }} (Kind)
    needs: [lint-helm-3-x]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        kubernetesVersion: [v1.23, v1.22, v1.21, v1.20, v1.19, v1.18, v1.17]
        include:
          # Images are defined on every Kind release
          # See https://github.com/kubernetes-sigs/kind/releases
        - kubernetesVersion: v1.23
          kindImage: kindest/node:v1.23.0@sha256:49824ab1727c04e56a21a5d8372a402fcd32ea51ac96a2706a12af38934f81ac
        - kubernetesVersion: v1.22
          kindImage: kindest/node:v1.22.0@sha256:b8bda84bb3a190e6e028b1760d277454a72267a5454b57db34437c34a588d047
        - kubernetesVersion: v1.21
          kindImage: kindest/node:v1.21.1@sha256:69860bda5563ac81e3c0057d654b5253219618a22ec3a346306239bba8cfa1a6
        - kubernetesVersion: v1.20
          kindImage: kindest/node:v1.20.7@sha256:cbeaf907fc78ac97ce7b625e4bf0de16e3ea725daf6b04f930bd14c67c671ff9
        - kubernetesVersion: v1.19
          kindImage: kindest/node:v1.19.11@sha256:07db187ae84b4b7de440a73886f008cf903fcf5764ba8106a9fd5243d6f32729
        - kubernetesVersion: v1.18
          kindImage: kindest/node:v1.18.19@sha256:7af1492e19b3192a79f606e43c35fb741e520d195f96399284515f077b3b622c
        - kubernetesVersion: v1.17
          kindImage: kindest/node:v1.17.17@sha256:66f1d0d91a88b8a001811e2f1054af60eef3b669a9a74f9b6db871f2f1eeed00
    env:
      kubernetes_namespace: promitor
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Helm install
      uses: Azure/setup-helm@v3

    - name: Download Metrics configuration
      run: wget https://raw.githubusercontent.com/tomkerkhove/promitor/master/config/promitor/scraper/metrics.yaml
      working-directory: ./config

    - name: Create k8s ${{ matrix.kubernetesVersion }} Kind Cluster
      uses: helm/kind-action@v1.4.0
      with:
        node_image: ${{ matrix.kindImage }}

    - name: Show Kubernetes version
      run: |
        kubectl version

    - name: Show Kubernetes nodes
      run: |
        kubectl get nodes -o wide

    - name: Show Helm version
      run: |
        helm version

    - name: Create Promitor namespace
      run: kubectl create ns ${{ env.kubernetes_namespace }}

    - name: Change Kubernetes context to use Promitor namespace
      run: kubectl config set-context --current --namespace=${{ env.kubernetes_namespace }}

    - name: Template Helm chart
      run: helm template promitor-agent-scraper ./promitor-agent-scraper/ --set azureAuthentication.identity.id=${{ secrets.SCRAPER_APP_ID }} --set azureAuthentication.identity.key=${{ secrets.SCRAPER_APP_KEY }} --set azureMetadata.tenantId=${{ secrets.AZURE_TENANT_ID }} --set azureMetadata.subscriptionId=${{ secrets.AZURE_SUBSCRIPTION_ID }} --values ./config/scraper.yaml

    - name: Install Helm chart
      run: helm install promitor-agent-scraper ./promitor-agent-scraper/ --set azureAuthentication.identity.id=${{ secrets.SCRAPER_APP_ID }} --set azureAuthentication.identity.key=${{ secrets.SCRAPER_APP_KEY }} --set azureMetadata.tenantId=${{ secrets.AZURE_TENANT_ID }} --set azureMetadata.subscriptionId=${{ secrets.AZURE_SUBSCRIPTION_ID }} --values ./config/scraper.yaml --wait

    - name: Wait for Kubernetes workload to spin up
      run: sleep 30s
      shell: bash
      if: always()

    - name: Show installed Helm charts
      run: helm ls
      if: always()

    - name: Show Kubernetes resources
      run: kubectl get all
      if: always()

    - name: Show Pod Logs
      run: |
        CONTAINER_RESTART_COUNT=$(kubectl get pod -l app.kubernetes.io/name=promitor-agent-scraper -o=jsonpath='{.items[0].status.containerStatuses[0].restartCount}')
        kubectl logs -l app.kubernetes.io/name=promitor-agent-scraper

        echo "Current container logs"
        kubectl logs -l app.kubernetes.io/name=promitor-agent-scraper

        if [ "$CONTAINER_RESTART_COUNT" -gt 0 ]; then
          echo "Previous container logs"
          kubectl logs -l app.kubernetes.io/name=promitor-agent-scraper --previous
        fi
      if: always()

    - name: Show Pod Info
      run: kubectl describe pod -l app.kubernetes.io/name=promitor-agent-scraper
      if: always()

    - name: Verify Pod & Container Status is Running
      run: |
        POD_STATUS=$(kubectl get pod -l app.kubernetes.io/name=promitor-agent-scraper -o=jsonpath='{.items[0].status.phase}')
        echo "Pod status is ${POD_STATUS}."

        CONTAINER_READY=$(kubectl get pod -l app.kubernetes.io/name=promitor-agent-scraper -o=jsonpath='{.items[0].status.containerStatuses[0].ready}')
        echo "Is the container ready: ${CONTAINER_READY}."

        if [ "$POD_STATUS" = "Running" ]; then

          if $CONTAINER_READY; then
              exit 0
          else
              exit -1
          fi
        else
            exit -1
        fi
      if: always()
