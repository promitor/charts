name: Helm Chart CI - Scraper Agent

on:
  pull_request:
    paths:
    - '.github/workflows/ci-agent-scraper.yml'
    - 'promitor-agent-scraper/**'

jobs:
  lint-helm-3-x:
    name: Lint Helm Chart
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Helm install
      uses: Azure/setup-helm@v1

    - name: Lint Promitor Scraper Helm chart
      run: helm lint promitor-agent-scraper

  deploy-helm-3-x:
    name: Deploy chart to Kind cluster
    needs: [lint-helm-3-x]
    runs-on: ubuntu-latest
    env:
      kubernetes_namespace: promitor
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Helm install
      uses: Azure/setup-helm@v1

    - name: Create k8s Kind Cluster
      uses: helm/kind-action@v1.2.0

    - name: Show Kubernetes version
      run: |
        kubectl version

    - name: Show Helm version
      run: |
        helm version

    - name: Create Promitor namespace
      run: kubectl create ns ${{ env.kubernetes_namespace }}

    - name: Change Kubernetes context to use Promitor namespace
      run: kubectl config set-context --current --namespace=${{ env.kubernetes_namespace }}

    - name: Template Helm chart
      run: helm template promitor-agent-scraper ./promitor-agent-scraper/ --set azureAuthentication.identity.id=${{ secrets.SCRAPER_APP_ID }} --set azureAuthentication.identity.key=${{ secrets.SCRAPER_APP_KEY }} --set azureMetadata.tenantId=${{ secrets.AZURE_TENANT_ID }} --set azureMetadata.subscriptionId=${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Install Helm chart
      run: helm install promitor-agent-scraper ./promitor-agent-scraper/ --set azureAuthentication.identity.id=${{ secrets.SCRAPER_APP_ID }} --set azureAuthentication.identity.key=${{ secrets.SCRAPER_APP_KEY }} --set azureMetadata.tenantId=${{ secrets.AZURE_TENANT_ID }} --set azureMetadata.subscriptionId=${{ secrets.AZURE_SUBSCRIPTION_ID }} --wait

    - name: Wait for Kubernetes workload to spin up
      run: sleep 30s
      shell: bash
      if: always()

    - name: Show installed Helm charts
      run: helm ls
      if: always()

    - name: Show Kubernetes resources
      run: kubectl get all
      if: always()

    - name: Show Pod Logs
      run: |
        CONTAINER_RESTART_COUNT=$(kubectl get pod -l app.kubernetes.io/name=promitor-agent-scraper -o=jsonpath='{.items[0].status.containerStatuses[0].restartCount}')
        kubectl logs -l app.kubernetes.io/name=promitor-agent-scraper

        echo "Current container logs"
        kubectl logs -l app.kubernetes.io/name=promitor-agent-scraper

        if [ "$CONTAINER_RESTART_COUNT" -gt 0 ]; then
          echo "Previous container logs"
          kubectl logs -l app.kubernetes.io/name=promitor-agent-scraper --previous
        fi
      if: always()

    - name: Show Pod Info
      run: kubectl describe pod -l app.kubernetes.io/name=promitor-agent-scraper
      if: always()

    - name: Verify Pod & Container Status is Running
      run: |
        POD_STATUS=$(kubectl get pod -l app.kubernetes.io/name=promitor-agent-scraper -o=jsonpath='{.items[0].status.phase}')
        echo "Pod status is ${POD_STATUS}."

        CONTAINER_READY=$(kubectl get pod -l app.kubernetes.io/name=promitor-agent-scraper -o=jsonpath='{.items[0].status.containerStatuses[0].ready}')
        echo "Is the container ready: ${CONTAINER_READY}."

        if [ "$POD_STATUS" = "Running" ]; then

          if $CONTAINER_READY; then
              exit 0
          else
              exit -1
          fi
        else
            exit -1
        fi
      if: always()
