apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "promitor-agent-scraper.name" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "promitor-agent-scraper.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      {{- include "promitor-agent-scraper.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "promitor-agent-scraper.selectorLabels" . | nindent 8 }}
      {{- if .Values.podLabels }}
      {{- toYaml .Values.podLabels | nindent 8 }}
      {{- end }}
      {{- if empty .Values.azureAuthentication.identity.binding | not }}
        aadpodidbinding: {{ .Values.azureAuthentication.identity.binding }}
      {{- end }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- if .Values.secrets.createSecret }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        {{- end }}
    spec:
      {{- if and .Values.rbac.create .Values.rbac.serviceAccount.create .Values.rbac.serviceAccount.automountServiceAccountToken }}
      automountServiceAccountToken: true
      {{- end }}
      {{- if .Values.securityContext.enabled }}
      securityContext: {{- omit .Values.securityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.rbac.create }}
      serviceAccountName: {{ template "promitor-agent-scraper.serviceaccountname" . }}
      {{- end }}
      {{- with .Values.image.pullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
        {{- toYaml .Values.tolerations | nindent 6 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          env:
  {{- if or (or .Values.azureAuthentication.identity.key .Values.azureAuthentication.appKey) (eq .Values.secrets.createSecret false) }}
          - name: PROMITOR_AUTH_APPKEY
            valueFrom:
              secretKeyRef:
                  name: {{ template "promitor-agent-scraper.secretname" . }}
                  key: {{ .Values.secrets.appKeySecret }}
  {{- end}}
  {{- if or (.Values.metricSinks.atlassianStatuspage.apiKey) (and (eq .Values.metricSinks.atlassianStatuspage.enabled true) (eq .Values.secrets.createSecret false)) }}
          - name: PROMITOR_ATLASSIAN_STATUSPAGE_APIKEY
            valueFrom:
              secretKeyRef:
                  name: {{ template "promitor-agent-scraper.secretname" . }}
                  key: {{ .Values.secrets.atlassianStatuspageApiKey }}
  {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          volumeMounts:
          - name: config-volume-{{ template "promitor-agent-scraper.name" . }}
            mountPath: /config/
          {{- if and .Values.containerSecurityContext.enabled .Values.containerSecurityContext.readOnlyRootFilesystem }}
          - name: tmp
            mountPath: /tmp/
          {{- end }}
  {{- if .Values.health.liveness.enabled }}
          livenessProbe:
            failureThreshold: {{ .Values.health.liveness.thresholds.failure }}
            httpGet:
              path: /api/v1/health?includeDependencies={{ .Values.health.liveness.verifyDependencies }}
              port: http
            initialDelaySeconds: {{ .Values.health.liveness.delay }}
            periodSeconds: {{ .Values.health.liveness.interval }}
            successThreshold: {{ .Values.health.liveness.thresholds.success }}
            timeoutSeconds: {{ .Values.health.liveness.timeoutSeconds }}
  {{- end }}
  {{- if .Values.health.readiness.enabled }}
          readinessProbe:
            failureThreshold: {{ .Values.health.readiness.thresholds.failure }}
            httpGet:
              path: /api/v1/health?includeDependencies={{ .Values.health.readiness.verifyDependencies }}
              port: http
            initialDelaySeconds: {{ .Values.health.readiness.delay }}
            periodSeconds: {{ .Values.health.readiness.interval }}
            successThreshold: {{ .Values.health.readiness.thresholds.success }}
            timeoutSeconds: {{ .Values.health.readiness.timeoutSeconds }}
  {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity: {{- tpl (toYaml .) $ | nindent 8 }}
      {{- end }}
      volumes:
        - name: config-volume-{{ template "promitor-agent-scraper.name" . }}
          configMap:
            name: config-map-{{ template "promitor-agent-scraper.name" . }}
        {{- if and .Values.containerSecurityContext.enabled .Values.containerSecurityContext.readOnlyRootFilesystem }}
        - emptyDir: {}
          name: tmp
        {{- end }}
